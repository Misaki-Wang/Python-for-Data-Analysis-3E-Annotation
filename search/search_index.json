{"config":{"lang":["ja"],"separator":"[\\s\\-\uff0c\u3002]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"Home","text":"<p>Hello, this is a test</p>"},{"location":"chapter7/","title":"Chapter 7","text":""},{"location":"chapter7/#_1","title":"\u5904\u7406\u7f3a\u5931\u6570\u636e","text":"<p>pandas\u4e2d\u7684\u5448\u73b0\u65b9\u5f0f\uff0c\u53c8\u79f0\u54e8\u5175\u503c\uff1a</p> <ul> <li>\u5728 <code>numpy</code> \u4e2d\u5229\u7528 <code>np.nan</code> \u6765\u8868\u793a\u7f3a\u5931\u503c</li> </ul> <p>\uff1f\u8fd9\u91cc\u7684NaN\u662f\u6307numpy\u4e2d\u7684NaN\u5417\uff0c\u53ea\u9488\u5bf9\u6d6e\u70b9\u503c\u5417\uff1f - NA(Not Available) Python\u5185\u7f6e\u7684None\u503c - &gt; <code>pandas.NA</code> ?</p> <p>pandas.NA \u2014 pandas 2.0.3 documentation (pydata.org)</p> <p>NA\u7684\u5904\u7406\u65b9\u6cd5 <code>dropna  fillna  isnull  notnull</code> </p> <p><code>isna</code> \u548c <code>isnull</code>\u7684\u533a\u522b \uff0c\u6ca1\u6709\u533a\u522b</p>"},{"location":"chapter7/#_2","title":"\u8fc7\u6ee4\u7f3a\u5931\u6570\u636e","text":"<pre><code>DataFrame.dropna(*, axis=0, how=_NoDefault.no_default, thresh=_NoDefault.no_default, subset=None, inplace=False, ignore_index=False)\n</code></pre> <ul> <li>Series\uff0c\u8fd4\u56de\u4e00\u4e2a\u4ec5\u542b\u975e\u7a7a\u6570\u636e\u548c\u7d22\u5f15\u503c\u7684Series</li> <li>DataFrame\uff0c</li> <li>\u53c2\u6570\uff1a     \u8f74\u65b9\u5411  <code>axis{0 or \u2018index\u2019, 1 or \u2018columns\u2019}, default 0</code> </li> <li>\u5220\u9664\u65b9\u5f0f <code>how{\u2018any\u2019, \u2018all\u2019}, default \u2018any\u2019</code> <ul> <li><code>any</code>\u8be5\u884c/\u5217\u4e2d\u5b58\u5728NA\u503c\uff0c\u5220\u9664\u8be5\u884c/\u5217</li> <li><code>all</code>\u8be5\u884c/\u5217\u4e2d\u5168\u4e3aNA\u503c\uff0c\u5220\u9664\u8be5\u884c/\u5217</li> </ul> </li> <li>\u5220\u9664\u7684\u975e\u7f3a\u5931\u503c\u4e2a\u6570\u9608\u503c <code>thresh</code> \uff08 \u975eNA\u503c \u6ca1\u6709\u8fbe\u5230\u8fd9\u4e2a\u6570\u91cf\u7684\u76f8\u5e94\u7ef4\u5ea6\u4f1a\u88ab\u5220\u9664\uff09</li> </ul>"},{"location":"chapter7/#_3","title":"\u586b\u5145\u7f3a\u5931\u6570\u636e","text":"<pre><code>DataFrame.fillna(value=None, *, method=None, axis=None, inplace=False, limit=None, downcast=None)\n</code></pre> <p>\u53c2\u6570\uff1a</p> <ul> <li> <p>\u586b\u5145\u503c:<code>value:scalar, dict, Series, or DataFrame</code>   \u53ef\u4ee5\u662f\u6807\u91cf\uff0c\u4e5f\u53ef\u4ee5\u662f\u7d22\u5f15\u5230\u5143\u7d20\u7684\u5b57\u5178\u6620\u5c04</p> </li> <li> <p>\u586b\u5145\u65b9\u6cd5<code>method:{\u2018backfill\u2019, \u2018bfill\u2019, \u2018ffill\u2019, None}, default None</code></p> </li> <li> <p><code>bfill</code>\u540e\u9762\u7684\u5143\u7d20\u586b\u5145</p> </li> <li> <p><code>ffill</code>\u7528\u524d\u9762\u7684\u5143\u7d20\u586b\u5145</p> </li> <li> <p>\u8fde\u7eed\u7f3a\u5931\u503c\u7684\u6700\u5927\u586b\u5145\u6b21\u6570<code>limit:int, default None</code></p> </li> <li> <p>\u662f\u5426\u5bf9\u539f\u6709\u5bf9\u8c61\u8fdb\u884c\u4fee\u6539<code>inplace:bool, default False</code></p> </li> </ul> <p>fillna\u4f1a\u9ed8\u8ba4\u8fd4\u56de\u65b0\u5bf9\u8c61\uff0c\u82e5<code>inplace = True</code>\uff0c\u5219\u76f4\u63a5\u5bf9\u73b0\u6709\u5bf9\u8c61\u8fdb\u884c\u5c31\u5730\u4fee\u6539\uff0c\u800c\u975e\u8fd4\u56de\u65b0\u5bf9\u8c61</p> <pre><code>In [44]: df\nOut[44]: \n0         1         2\n0  0.476985  3.248944 -1.021228\n1 -0.577087  0.124121  0.302614\n2  0.523772       NaN  1.343810\n3 -0.713544       NaN -2.370232\n4 -1.860761       NaN       NaN\n5 -1.265934       NaN       NaN\n#\u5728\u7b2c1\u5217\u4e2d\uff0c\u4ece\u7b2c2\u884c\u5f00\u59cb\u7528\u524d\u9762\u7684\u5143\u7d20\u8fdb\u884c\u586b\u5145(ffill)\uff0c\u6700\u5927\u586b\u51992\u6b21\uff0c\u5373\u586b\u51992\u30013\u4e24\u884c\nIn [46]: df.fillna(method=\"ffill\", limit=2)\nOut[46]: \n0         1         2\n0  0.476985  3.248944 -1.021228\n1 -0.577087  0.124121  0.302614\n2  0.523772  0.124121  1.343810\n3 -0.713544  0.124121 -2.370232\n4 -1.860761       NaN -2.370232\n5 -1.265934       NaN -2.370232\n</code></pre>"},{"location":"chapter7/#_4","title":"\u6570\u636e\u8f6c\u6362","text":""},{"location":"chapter7/#_5","title":"\u5220\u9664\u91cd\u590d\u6570\u636e","text":"<pre><code>DataFrame.duplicated(subset=None, keep='first')\n</code></pre> <p>\u8fd4\u56de\u8868\u793a\u91cd\u590d\u884c\u7684bool Series</p> <p><code>keep</code>, \u9ed8\u8ba4 \u2018first\u2019 </p> <ul> <li><code>first</code> : Mark duplicates as <code>True</code> except for the first occurrence.</li> <li><code>last</code> : Mark duplicates as <code>True</code> except for the last occurrence.</li> <li>False : Mark all duplicates as <code>True</code>.</li> </ul> <p>pandas.DataFrame.duplicated \u2014 pandas 2.0.3 documentation (pydata.org)</p> <pre><code>DataFrame.drop_duplicates(subset=None, *, keep='first', inplace=False, ignore_index=False)\n</code></pre> <p>\u5220\u9664\u7f3a\u5931\u503c</p> <p>keep{\u2018first\u2019, \u2018last\u2019, <code>False</code>}, default \u2018first\u2019</p> <p>Determines which duplicates (if any) to keep.</p> <ul> <li>\u2018first\u2019 : Drop duplicates except for the first occurrence.</li> <li>\u2018last\u2019 : Drop duplicates except for the last occurrence.</li> <li><code>False</code> : Drop all duplicates.</li> </ul> <p>pandas.DataFrame.drop_duplicates \u2014 pandas 2.0.3 documentation (pydata.org)</p>"},{"location":"chapter7/#_6","title":"\u5229\u7528\u51fd\u6570\u6216\u6620\u5c04\u8fdb\u884c\u6570\u636e\u8f6c\u6362","text":"<pre><code>Series.map(arg, na_action=None)\n</code></pre> <p>\u6839\u636e\u8f93\u5165\u6620\u5c04\u6216\u51fd\u6570\u6620\u5c04Series\uff0c\u5b9e\u73b0\u5143\u7d20\u96c6\u8f6c\u6362\u53ca\u5176\u4ed6\u7684\u6570\u636e\u6e05\u6d17\u5de5\u4f5c</p> <p>arg****function, collections.abc.Mapping subclass or Series</p> <p>na_action, default None \u5bf9NA\u503c\u7684\u5904\u7406</p> <ul> <li>\u5982\u679c\u2018ignore\u2019\uff0c\u5219\u4f20\u64ad NaN \u503c\uff0c\u800c\u4e0d\u5c06\u5176\u4f20\u9012\u7ed9\u6620\u5c04\u5bf9\u5e94\u3002</li> </ul> <p>pandas.Series.map \u2014 pandas 2.0.3 documentation (pydata.org)</p>"},{"location":"chapter7/#_7","title":"\u66ff\u6362\u503c","text":"<pre><code>DataFrame.replace(to_replace=None, value=_NoDefault.no_default, *, inplace=False, limit=None, regex=False, method=_NoDefault.no_default)\n</code></pre> <p>\u7528 <code>value</code> \u66ff\u6362<code>to_replace</code> \u4e2d\u7ed9\u51fa\u7684\u503c\u3002</p> <p>to_replace:str, regex, list, dict, Series, int, float, or None**</p> <p><code>to_replace</code>\u7684\u503c\u7684\u5bfb\u627e\uff0c\u8be6\u89c1doc</p> <p>value**: scalar, dict, list, str, regex, default None**</p> <p>pandas.DataFrame.replace \u2014 pandas 2.0.3 documentation (pydata.org)</p>"},{"location":"chapter7/#_8","title":"\u91cd\u547d\u540d\u8f74\u7d22\u5f15","text":"<p>\u901a\u8fc7<code>map</code>\u65b9\u6cd5</p> <pre><code>Index.map(mapper, na_action=None)[source]\n</code></pre> <p>mapper****function, dict, or Series</p> <p>na_action**** </p> <p>pandas.Index.map \u2014 pandas 2.0.3 documentation (pydata.org)</p> <pre><code>DataFrame.rename(mapper=None, *, index=None, columns=None, axis=None, copy=None, inplace=False, level=None, errors='ignore')\n</code></pre> <p>mapper****dict-like or function</p> <p>index****dict-like or function</p> <p>columns****dict-like or function</p> <p>axis**, default 0**</p> <p>inplace:bool, default False Whether to modify the DataFrame rather than creating a new one. If True then value of copy is ignored.</p> <p>\u4e24\u79cd\u5199\u6cd5\uff1a</p> <pre><code>df.rename(mapper,axis = 0)\ndf.rename(columns = mapper)\n</code></pre> <p>\u4ee5\u4e0a\u4e24\u8005\u7b49\u4ef7\uff0c<code>index</code>\u540c\u7406</p> <p>pandas.DataFrame.rename (pydata.org)</p> <p>\u4ee5\u4e0a\u4e24\u79cd\u5199\u6cd5\u4e2d\uff1a</p> <p>\u4f7f\u7528<code>index.map</code>\u8fdb\u884c\u4fee\u6539\u7b49\u540c\u4e8e<code>df.rename(...inplace = True)</code> </p>"},{"location":"chapter7/#_9","title":"\u79bb\u6563\u5316\u548c\u5206\u7bb1","text":"<pre><code>pandas.cut(x, bins, right=True, labels=None, retbins=False, precision=3, include_lowest=False, duplicates='raise', ordered=True)\n</code></pre> <p>\u5c06\u6570\u503c\u5212\u5206\u4e3a\u79bb\u6563\u533a\u95f4</p> <p>\u5f85\u5212\u5206\u7684\u6570\u7ec4  x:array-like The input array to be binned. Must be 1-dimensional.</p> <p>bins**:int, sequence of scalars, or IntervalIndex** The criteria to bin by.</p> <ul> <li>int : Defines the number of equal-width bins in the range of x. The range of x is extended by .1% on each side to include the minimum and maximum values of x.</li> <li>sequence of scalars : Defines the bin edges allowing for non-uniform width. No extension of the range of x is done.</li> <li>IntervalIndex : Defines the exact bins to be used. Note that IntervalIndex for bins must be non-overlapping.</li> </ul> <p>right\uff1abool, default True \u51b3\u5b9a\u90a3\u4e00\u8fb9\u662f\u5c01\u95ed\u7684\uff0c\u5f53<code>right == True</code> \u5de6\u5f00\u53f3\u95ed\uff0c\u5f53<code>right == False</code>\u5de6\u95ed\u53f3\u5f00 Indicates whether bins includes the rightmost edge or not. If <code>right == True</code> (the default), then the bins <code>[1, 2, 3, 4]</code> indicate (1,2], (2,3], (3,4]. This argument is ignored when bins is an IntervalIndex.</p> <p>precision:int, default 3 The precision at which to store and display the bins labels.</p> <p>pandas.cut \u2014 pandas 2.0.3 documentation (pydata.org)</p> <pre><code>pandas.qcut(x, q, labels=None, retbins=False, precision=3, duplicates='raise')\n</code></pre> <p>\u6839\u636e\u6837\u672c\u5206\u4f4d\u6570\u5bf9\u6837\u672c\u8fdb\u884c\u5212\u5206\uff0c\u4fbf\u4e8e\u5f97\u5230\u5927\u5c0f\u57fa\u672c\u76f8\u7b49\u7684\u5206\u7bb1</p> <p>x****1d ndarray or Series</p> <p>q****int or list-like of float Number of quantiles. 10 for deciles, 4 for quartiles, etc. Alternately array of quantiles, e.g. [0, .25, .5, .75, 1.] for quartiles.</p> <p>labels:</p> <p>pandas.qcut \u2014 pandas 2.0.3 documentation (pydata.org)</p> <p>categorical data type</p> <p>\u8fd9\u91cc\u5bf9 pandas categorical data type\u505a\u4e00\u4e2a\u7b80\u77ed\u7684\u89e3\u91ca</p> <p>Categorical data \u2014 pandas 2.0.3 documentation (pydata.org)</p>"},{"location":"chapter7/#_10","title":"\u68c0\u6d4b\u548c\u8fc7\u6ee4\u5f02\u5e38\u503c","text":"<pre><code>DataFrame.any(*, axis=0, bool_only=None, skipna=True, **kwargs)\n</code></pre> <p>\u8fd4\u56de\u4efb\u4f55\u5143\u7d20\u662f\u5426\u4e3a True\uff0c\u53ef\u80fd\u5728\u4e00\u4e2a\u8f74\u4e0a\u3002</p> <p>axis**, default 0**</p> <p>pandas.DataFrame.any \u2014 pandas 2.0.3 documentation (pydata.org)</p>"},{"location":"chapter7/#_11","title":"\u7f6e\u6362\u548c\u968f\u673a\u91c7\u6837","text":""},{"location":"chapter7/#_12","title":"\u7f6e\u6362","text":"<pre><code>random.permutation(x)\n</code></pre> <p>\u968f\u673a\u6392\u5217\u5e8f\u5217\uff0c\u6216\u8fd4\u56de\u4e00\u4e2a\u6392\u5217\u8303\u56f4\u3002</p> <p>\u53c2\u6570\uff1a</p> <p>**x**int or array_like If x is an integer, randomly permute <code>np.arange(x)</code>. If x is an array, make a copy and shuffle the elements randomly.</p> <p>\u8fd4\u56de\u503c\uff1a</p> <p>**out**ndarray Permuted sequence or array range.</p> <p>numpy.random.permutation \u2014 NumPy v1.25 Manual</p> <pre><code>DataFrame.take(indices, axis=0, **kwargs)\n</code></pre> <p>\u6cbf\u8f74\u8fd4\u56de\u7ed9\u5b9a\u4f4d\u7f6e\u7d22\u5f15\u4e2d\u7684\u5143\u7d20\u3002</p> <p>Parameters</p> <ul> <li> <p>axis**, default 0**</p> </li> <li> <p>**indices**array-like</p> </li> </ul> <p>An array of ints indicating which positions to take.</p> <p>Returns</p> <ul> <li>same type as caller</li> </ul> <p>An array-like containing the elements taken from the object.</p> <p>pandas.DataFrame.take \u2014 pandas 2.0.3 documentation (pydata.org)</p>"},{"location":"chapter7/#_13","title":"\u968f\u673a\u91c7\u6837","text":"<pre><code>DataFrame.sample(n=None, frac=None, replace=False, weights=None, random_state=None, axis=None, ignore_index=False\n</code></pre> <p>Parameters</p> <ul> <li>**n**int, optional</li> </ul> <p>Number of items from axis to return. Cannot be used with frac. Default = 1 if frac = None.</p> <ul> <li>**frac**float, optional</li> </ul> <p>Fraction of axis items to return. Cannot be used with n.</p> <ul> <li>**replace**bool, default False</li> </ul> <p>Allow or disallow sampling of the same row more than once.</p> <p>Returns</p> <ul> <li>Series or DataFrame</li> </ul> <p>A new object of same type as caller containing n items randomly sampled from the caller object.</p> <p>pandas.DataFrame.sample \u2014 pandas 2.0.3 documentation (pydata.org)</p>"},{"location":"chapter7/#_14","title":"\u8ba1\u7b97\u6307\u6807/\u865a\u62df\u53d8\u91cf","text":"<p>Dummy code</p> <p>Dummy variable (statistics) - Wikipedia</p> <pre><code>pandas.get_dummies(data, prefix=None, prefix_sep='_', dummy_na=False, columns=None, sparse=False, drop_first=False, dtype=None)\n</code></pre> <p>\u5c06\u5206\u7c7b\u53d8\u91cf\u8f6c\u6362\u4e3a\u865a\u62df\u53d8\u91cf/\u6307\u6807\u53d8\u91cf\u3002</p> <p>Parameters</p> <ul> <li>**data**array-like, Series, or DataFrame</li> </ul> <p>Data of which to get dummy indicators.</p> <ul> <li>**prefix**str, list of str, or dict of str, default None</li> </ul> <p>Returns</p> <ul> <li>DataFrame</li> </ul> <p>Dummy-coded data. If data contains other columns than the dummy-coded one(s), these will be prepended, unaltered, to the result.</p> <p>pandas.get_dummies \u2014 pandas 2.0.3 documentation (pydata.org)</p> <pre><code>DataFrame.add_prefix(prefix, axis=None)\n</code></pre> <p>\u4e3a\u6807\u7b7e\u52a0\u4e0a\u5b57\u7b26\u4e32\u524d\u7f00\u3002</p> <p>Parameters</p> <ul> <li>prefix  str</li> </ul> <p>The string to add before each label.</p> <ul> <li>axis}, default None</li> </ul> <p>Axis to add prefix on</p> <p>Returns</p> <ul> <li>Series or DataFrame</li> </ul> <p>New Series or DataFrame with updated labels.</p> <p>pandas.DataFrame.add_prefix \u2014 pandas 2.0.3 documentation (pydata.org)</p>"},{"location":"chapter7/#_15","title":"\u6269\u5c55\u6570\u636e\u7c7b\u578b","text":"<p>\u95ee\u9898\uff1a</p> <ul> <li>\u67d0\u4e9b\u6570\u636e\u7c7b\u578b\u7f3a\u5931\u503c\u7684\u5904\u7406\u4e0d\u5b8c\u5907</li> <li>\u542b\u6709\u5927\u91cf\u6570\u636e\u7684\u6570\u636e\u96c6\uff0c\u8ba1\u7b97\u5f00\u9500\u5927</li> <li>\u67d0\u4e9b\u6570\u636e\u7c7b\u578b\u9700\u8981\u4f7f\u7528\u5f00\u9500\u5927\u7684Python\u5bf9\u8c61\u6570\u7ec4\u624d\u80fd\u5b9e\u73b0\u9ad8\u6548\u8ba1\u7b97</li> </ul> <p>\u4e3a\u89e3\u51b3\u4ee5\u4e0a\u95ee\u9898\uff0cPandas\u53d1\u5c55\u51fa\u4e86\u6269\u5c55\u7c7b\u578b\uff0c\u53ef\u521b\u5efaNumPy\u539f\u672c\u4e0d\u652f\u6301\u7684\u65b0\u6570\u636e\u7c7b\u578b\u3002 \u8fd9\u4e9b\u65b0\u6570\u636e\u7c7b\u578b\u53ef\u4ee5\u5f53\u4f5cNumPy\u6570\u7ec4\u7684\u4e00\u7ea7\u7c7b\uff0c\u7b49\u540c\u4e8e\u5176\u4ed6NumPy\u539f\u751f\u6570\u636e</p> <p>\u65b0\u6570\u636e\u7c7b\u578b\u7684\u8be6\u89e3</p>"},{"location":"chapter7/#_16","title":"\u5b57\u7b26\u4e32\u64cd\u4f5c","text":""},{"location":"chapter7/#python","title":"Python\u5185\u7f6e\u7684\u5b57\u7b26\u4e32\u5bf9\u8c61\u65b9\u6cd5","text":"<p>Python\u5185\u7f6e\u7684\u5b57\u7b26\u4e32\u65b9\u6cd5\uff1a \u8868\u683c\uff0c\u6216\u8bb8\u53ef\u4ee5\u53c2\u8003Python Cookbook</p>"},{"location":"chapter7/#_17","title":"\u6b63\u5219\u8868\u8fbe\u5f0f","text":"<p>\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u7b80\u5355\u4e66\u5199\u548c\u7ec3\u4e60</p> <p>\u6b63\u5219\u8868\u8fbe\u5f0f\u5e38\u79f0\u4f5c<code>regex</code>\uff0cPython\u4e2d\u5185\u7f6e<code>re</code>\u6a21\u5757\u8d1f\u8d23\u5bf9\u5b57\u7b26\u4e32\u5e94\u7528\u6b63\u5219\u8868\u8fbe\u5f0f</p> <p>\u6b63\u5219\u8868\u8fbe\u5f0f\uff1a\u8868\u683c</p>"},{"location":"chapter7/#pandas","title":"Pandas\u7684\u5b57\u7b26\u4e32\u51fd\u6570","text":"<p>\u5b57\u7b26\u4e32\u89c4\u6574\u5de5\u4f5c</p> <p>\u901a\u8fc7<code>Series</code>\u7684<code>str</code>\u5c5e\u6027\u4e2d\u7684\u65b9\u6cd5\u8df3\u8fc7\u5e76\u4f20\u64ad<code>NA</code>\u503c</p> <p>Series\u7684\u90e8\u5206\u5b57\u7b26\u4e32\u65b9\u6cd5\uff1a\u8868\u683c</p>"},{"location":"chapter7/#_18","title":"\u5206\u7c7b\u6570\u636e","text":""},{"location":"chapter7/#_19","title":"\u80cc\u666f\u548c\u76ee\u6807","text":"<p>\u5206\u7c7b\u8868\u793a\u6cd5/\u5b57\u5178\u7f16\u7801\u8868\u793a\u6cd5\uff1a\u7528\u6574\u6570\u8868\u793a\u7684\u65b9\u6cd5</p> <p>\u6570\u636e\u7684\u5206\u7c7b/\u5b57\u5178/\u5c42\u7ea7\uff1a\u4e0d\u540c\u503c\u7684\u6570\u7ec4</p> <p>\u5206\u7c7b\u7f16\u7801\uff1a\u8868\u793a\u5206\u7c7b\u7684\u6574\u6570\u503c</p>"},{"location":"chapter7/#pandas_1","title":"Pandas\u7684\u5206\u7c7b\u6269\u5c55\u7c7b\u578b","text":"<p><code>pandas.Categories</code></p> <p>\u6709<code>categories</code>\u548c<code>codes</code>\u4e24\u4e2a\u5c5e\u6027</p> <p><code>Categories</code>\u7684\u6784\u9020</p> <p>Categorical data \u2014 pandas 2.0.3 documentation (pydata.org)</p>"},{"location":"chapter7/#categorical","title":"\u5229\u7528Categorical\u5bf9\u8c61\u8fdb\u884c\u8ba1\u7b97","text":"<p>\u7b2c\u4e5d\u7ae0 \u5206\u7c7b\u6570\u636e \u2014 Joyful Pandas 1.0 documentation (datawhale.club)</p>"},{"location":"chapter7/#_20","title":"\u5206\u7c7b\u65b9\u6cd5","text":"<p><code>.cat</code> <code>set_categories</code> <code>remove_unused_categories</code></p> <p>Pandas\u4e2dSeries\u7684\u5206\u7c7b\u65b9\u6cd5\uff1a\u8868\u683c</p> <p>one-hot code</p>"}]}